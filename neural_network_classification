{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "6f9941f1-a2d2-405f-9663-f25f0fcc1b77",
      "metadata": {
        "id": "6f9941f1-a2d2-405f-9663-f25f0fcc1b77"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "# import hvplot.pandas\n",
        "import re\n",
        "# from pycaret.classification import *\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
        "import tensorflow as tf\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "eca14dc0-7490-4f75-83d2-96fb0efa8311",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 687
        },
        "id": "eca14dc0-7490-4f75-83d2-96fb0efa8311",
        "outputId": "2e8db889-3a29-4972-d1d4-2f3f9a504c00"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0    country                                        description  \\\n",
              "0       42302     Turkey  Apricot blush in color, this wine has aromas o...   \n",
              "1       66086     Turkey  Deep-salmon to the eye, this wine has a nose o...   \n",
              "2       51421  Macedonia  This Macedonian wine made from 100% Žilavka ha...   \n",
              "3       45401         US  Comprised 100% of this rare variety, this wine...   \n",
              "4       98235     France  Abouriou is a grape found almost exclusively i...   \n",
              "\n",
              "        designation  points  price          province              region_1  \\\n",
              "0     Seahorse Rosé      86   19.0            Aegean                   NaN   \n",
              "1      Mermaid Rosé      87   19.0            Aegean                   NaN   \n",
              "2               NaN      88   15.0            Tikves                   NaN   \n",
              "3  Moonlight Sonata      85   75.0        California  Russian River Valley   \n",
              "4              Just      87   15.0  Southwest France   Côtes du Marmandais   \n",
              "\n",
              "  region_2     taster_name taster_twitter_handle  \\\n",
              "0      NaN   Mike DeSimone        @worldwineguys   \n",
              "1      NaN   Mike DeSimone        @worldwineguys   \n",
              "2      NaN    Jeff Jenssen        @worldwineguys   \n",
              "3   Sonoma  Virginie Boone               @vboone   \n",
              "4      NaN      Roger Voss            @vossroger   \n",
              "\n",
              "                                               title    variety wine_type  \\\n",
              "0      Pasaeli 2015 Seahorse Rosé Çalkarası (Aegean)  Çalkarası     white   \n",
              "1       Pasaeli 2015 Mermaid Rosé Çalkarası (Aegean)  Çalkarası     white   \n",
              "2                        Stobi 2014 Žilavka (Tikves)    Žilavka     white   \n",
              "3  Cerridwen 2012 Moonlight Sonata Abouriou (Russ...   Abouriou       red   \n",
              "4  Cave du Marmandais 2012 Just Abouriou (Côtes d...   Abouriou       red   \n",
              "\n",
              "               winery  \n",
              "0             Pasaeli  \n",
              "1             Pasaeli  \n",
              "2               Stobi  \n",
              "3           Cerridwen  \n",
              "4  Cave du Marmandais  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-9bef4970-7b0b-41fd-9144-4828cc247688\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>country</th>\n",
              "      <th>description</th>\n",
              "      <th>designation</th>\n",
              "      <th>points</th>\n",
              "      <th>price</th>\n",
              "      <th>province</th>\n",
              "      <th>region_1</th>\n",
              "      <th>region_2</th>\n",
              "      <th>taster_name</th>\n",
              "      <th>taster_twitter_handle</th>\n",
              "      <th>title</th>\n",
              "      <th>variety</th>\n",
              "      <th>wine_type</th>\n",
              "      <th>winery</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>42302</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>Apricot blush in color, this wine has aromas o...</td>\n",
              "      <td>Seahorse Rosé</td>\n",
              "      <td>86</td>\n",
              "      <td>19.0</td>\n",
              "      <td>Aegean</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mike DeSimone</td>\n",
              "      <td>@worldwineguys</td>\n",
              "      <td>Pasaeli 2015 Seahorse Rosé Çalkarası (Aegean)</td>\n",
              "      <td>Çalkarası</td>\n",
              "      <td>white</td>\n",
              "      <td>Pasaeli</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>66086</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>Deep-salmon to the eye, this wine has a nose o...</td>\n",
              "      <td>Mermaid Rosé</td>\n",
              "      <td>87</td>\n",
              "      <td>19.0</td>\n",
              "      <td>Aegean</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mike DeSimone</td>\n",
              "      <td>@worldwineguys</td>\n",
              "      <td>Pasaeli 2015 Mermaid Rosé Çalkarası (Aegean)</td>\n",
              "      <td>Çalkarası</td>\n",
              "      <td>white</td>\n",
              "      <td>Pasaeli</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>51421</td>\n",
              "      <td>Macedonia</td>\n",
              "      <td>This Macedonian wine made from 100% Žilavka ha...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>88</td>\n",
              "      <td>15.0</td>\n",
              "      <td>Tikves</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Jeff Jenssen</td>\n",
              "      <td>@worldwineguys</td>\n",
              "      <td>Stobi 2014 Žilavka (Tikves)</td>\n",
              "      <td>Žilavka</td>\n",
              "      <td>white</td>\n",
              "      <td>Stobi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>45401</td>\n",
              "      <td>US</td>\n",
              "      <td>Comprised 100% of this rare variety, this wine...</td>\n",
              "      <td>Moonlight Sonata</td>\n",
              "      <td>85</td>\n",
              "      <td>75.0</td>\n",
              "      <td>California</td>\n",
              "      <td>Russian River Valley</td>\n",
              "      <td>Sonoma</td>\n",
              "      <td>Virginie Boone</td>\n",
              "      <td>@vboone</td>\n",
              "      <td>Cerridwen 2012 Moonlight Sonata Abouriou (Russ...</td>\n",
              "      <td>Abouriou</td>\n",
              "      <td>red</td>\n",
              "      <td>Cerridwen</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>98235</td>\n",
              "      <td>France</td>\n",
              "      <td>Abouriou is a grape found almost exclusively i...</td>\n",
              "      <td>Just</td>\n",
              "      <td>87</td>\n",
              "      <td>15.0</td>\n",
              "      <td>Southwest France</td>\n",
              "      <td>Côtes du Marmandais</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Roger Voss</td>\n",
              "      <td>@vossroger</td>\n",
              "      <td>Cave du Marmandais 2012 Just Abouriou (Côtes d...</td>\n",
              "      <td>Abouriou</td>\n",
              "      <td>red</td>\n",
              "      <td>Cave du Marmandais</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bef4970-7b0b-41fd-9144-4828cc247688')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-55f4604e-df74-428a-9d01-5ceed2454ca8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55f4604e-df74-428a-9d01-5ceed2454ca8')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-55f4604e-df74-428a-9d01-5ceed2454ca8 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9bef4970-7b0b-41fd-9144-4828cc247688 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9bef4970-7b0b-41fd-9144-4828cc247688');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "file_path1 = \"wine_data.csv\"\n",
        "df= pd.read_csv(file_path1)\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "5d27543b-284b-49e0-9561-f2fb142b26c4",
      "metadata": {
        "id": "5d27543b-284b-49e0-9561-f2fb142b26c4"
      },
      "outputs": [],
      "source": [
        "# import sweetviz as sv\n",
        "\n",
        "# my_report = sv.analyze(df)\n",
        "# my_report.show_html()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "db8f183d-4ac9-4600-bbd8-7637ca69ae51",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "db8f183d-4ac9-4600-bbd8-7637ca69ae51",
        "outputId": "39ce9196-dfa2-4895-b8dc-4211a7ec9e2d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0                   0\n",
              "country                     56\n",
              "description                  0\n",
              "designation              37358\n",
              "points                       0\n",
              "price                     8973\n",
              "province                    56\n",
              "region_1                 21112\n",
              "region_2                 79160\n",
              "taster_name              26178\n",
              "taster_twitter_handle    31127\n",
              "title                        0\n",
              "variety                      0\n",
              "wine_type                    0\n",
              "winery                       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "03b63c02-dc0d-4d34-bb29-e09c01801995",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "03b63c02-dc0d-4d34-bb29-e09c01801995",
        "outputId": "94eeb471-39a8-430c-a894-13a15e23f4a8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0               129626\n",
              "country                  129570\n",
              "description              129626\n",
              "designation               92268\n",
              "points                   129626\n",
              "price                    120653\n",
              "province                 129570\n",
              "region_1                 108514\n",
              "region_2                  50466\n",
              "taster_name              103448\n",
              "taster_twitter_handle     98499\n",
              "title                    129626\n",
              "variety                  129626\n",
              "wine_type                129626\n",
              "winery                   129626\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "df.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "80a0f6d1-69c9-499b-9bde-8e5c8c5f9a1d",
      "metadata": {
        "id": "80a0f6d1-69c9-499b-9bde-8e5c8c5f9a1d"
      },
      "outputs": [],
      "source": [
        "# removing any lines without target values\n",
        "df = df[df['price'].notna()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "b41ed266-2fa3-4ce2-aec0-6a4501c90971",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b41ed266-2fa3-4ce2-aec0-6a4501c90971",
        "outputId": "eedc9f17-be3b-4a03-dcb4-181510dbdfff"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0               120653\n",
              "country                  120601\n",
              "description              120653\n",
              "designation               85979\n",
              "points                   120653\n",
              "price                    120653\n",
              "province                 120601\n",
              "region_1                 101200\n",
              "region_2                  50247\n",
              "taster_name               96219\n",
              "taster_twitter_handle     91318\n",
              "title                    120653\n",
              "variety                  120653\n",
              "wine_type                120653\n",
              "winery                   120653\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# confirming na rows were deleted\n",
        "df.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "82395bfd-fddf-4b1e-8fb0-3abab0656340",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "82395bfd-fddf-4b1e-8fb0-3abab0656340",
        "outputId": "f5902df4-c65c-4bff-955c-fda542ae3891"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "California           36078\n",
              "Washington            8576\n",
              "Oregon                5357\n",
              "Tuscany               5124\n",
              "Bordeaux              4001\n",
              "                     ...  \n",
              "Dealurile Hușilor        1\n",
              "Kathikas                 1\n",
              "Dalmatian Coast          1\n",
              "Commandaria              1\n",
              "Imathia                  1\n",
              "Name: province, Length: 415, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df.province.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "92de6a06-34cf-41e8-8169-dd5f2ee23346",
      "metadata": {
        "id": "92de6a06-34cf-41e8-8169-dd5f2ee23346"
      },
      "outputs": [],
      "source": [
        "df = df.drop(labels='Unnamed: 0', axis=1)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "f86e3d69-ab98-4213-9dcf-9af6f3325943",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "f86e3d69-ab98-4213-9dcf-9af6f3325943",
        "outputId": "e3438609-adbb-47f3-8fcb-d697876b1c70"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              points          price\n",
              "count  120653.000000  120653.000000\n",
              "mean       88.423728      35.381897\n",
              "std         3.045260      41.038540\n",
              "min        80.000000       4.000000\n",
              "25%        86.000000      17.000000\n",
              "50%        88.000000      25.000000\n",
              "75%        91.000000      42.000000\n",
              "max       100.000000    3300.000000"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-77b7d173-263e-4199-a9cc-8ebeec6a713d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>points</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>120653.000000</td>\n",
              "      <td>120653.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>88.423728</td>\n",
              "      <td>35.381897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.045260</td>\n",
              "      <td>41.038540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>80.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>86.000000</td>\n",
              "      <td>17.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>88.000000</td>\n",
              "      <td>25.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>91.000000</td>\n",
              "      <td>42.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>100.000000</td>\n",
              "      <td>3300.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77b7d173-263e-4199-a9cc-8ebeec6a713d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-f2385cc2-8036-4f2a-9e9d-4ebd6dd82a44\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2385cc2-8036-4f2a-9e9d-4ebd6dd82a44')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-f2385cc2-8036-4f2a-9e9d-4ebd6dd82a44 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-77b7d173-263e-4199-a9cc-8ebeec6a713d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-77b7d173-263e-4199-a9cc-8ebeec6a713d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "2755f48f-7d48-4a6e-a69f-c59d1e412b2b",
      "metadata": {
        "id": "2755f48f-7d48-4a6e-a69f-c59d1e412b2b"
      },
      "outputs": [],
      "source": [
        "# df.to_csv('cleaned_wine_data.csv', index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "8fccb537-5041-4bca-b553-79f720b3b8a9",
      "metadata": {
        "id": "8fccb537-5041-4bca-b553-79f720b3b8a9"
      },
      "outputs": [],
      "source": [
        "province = df.province.value_counts()\n",
        "\n",
        "# province.hvplot.bar()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3pmloqQHwgL1"
      },
      "id": "3pmloqQHwgL1",
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "ef266f8c-d48f-4ff8-a917-f1d0d4532969",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ef266f8c-d48f-4ff8-a917-f1d0d4532969",
        "outputId": "d49fc1d8-d1f2-4c09-cb07-69fe749100bc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "California            36078\n",
              "Washington             8576\n",
              "Oregon                 5357\n",
              "Tuscany                5124\n",
              "Bordeaux               4001\n",
              "Northern Spain         3793\n",
              "Mendoza Province       3226\n",
              "Burgundy               3105\n",
              "Piedmont               3086\n",
              "New York               2666\n",
              "Veneto                 2314\n",
              "Alsace                 2146\n",
              "Northeastern Italy     1959\n",
              "Loire Valley           1591\n",
              "Sicily & Sardinia      1548\n",
              "Champagne              1383\n",
              "Southwest France       1332\n",
              "South Australia        1331\n",
              "Catalonia              1151\n",
              "Provence               1135\n",
              "Name: province, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "province.head(20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "84896a50-c576-47ab-830e-da11a0e66812",
      "metadata": {
        "id": "84896a50-c576-47ab-830e-da11a0e66812"
      },
      "outputs": [],
      "source": [
        "# p_df = df.copy()\n",
        "# p_df = p_df.groupby('province')\n",
        "# p_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "81e68399-1242-4e7d-a126-8466a2bfdb37",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81e68399-1242-4e7d-a126-8466a2bfdb37",
        "outputId": "d247b937-eb5b-4f2c-98a1-6d624ce231b0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "country                  74660\n",
              "description              74660\n",
              "designation              50044\n",
              "points                   74660\n",
              "price                    74660\n",
              "province                 74660\n",
              "region_1                 74582\n",
              "region_2                 47581\n",
              "taster_name              54402\n",
              "taster_twitter_handle    54402\n",
              "title                    74660\n",
              "variety                  74660\n",
              "wine_type                74660\n",
              "winery                   74660\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "top_ten_list = ['California','Washington','Bordeaux','Tuscany','Oregon','Burgundy','Northern Spain','Piedmont','Mendoza Province','Veneto']\n",
        "\n",
        "top_ten_provinces = df.query('province in @top_ten_list')\n",
        "\n",
        "\n",
        "top_ten_df = pd.DataFrame(top_ten_provinces)\n",
        "top_ten_df.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "671b22e9-3920-44ba-a8cf-4282d9031760",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "671b22e9-3920-44ba-a8cf-4282d9031760",
        "outputId": "36995f90-2f2c-4703-ccc5-0254ac3d5a39"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "top_ten_df['points'].isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "732e4f49-ef93-4d42-bb56-eeaa4bb3ae29",
      "metadata": {
        "id": "732e4f49-ef93-4d42-bb56-eeaa4bb3ae29"
      },
      "outputs": [],
      "source": [
        "df_desc_desig = top_ten_df[['wine_type','designation','description']].copy()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "b07a83de-6287-45fd-a2e5-3a49949f27bb",
      "metadata": {
        "id": "b07a83de-6287-45fd-a2e5-3a49949f27bb"
      },
      "outputs": [],
      "source": [
        "# df_desc_desig = df_desc_desig[df_desc_province['designation'].notna()]\n",
        "# df_desc_desig.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "fbdaa91c-325b-4a84-96ac-a092131a0f59",
      "metadata": {
        "id": "fbdaa91c-325b-4a84-96ac-a092131a0f59"
      },
      "outputs": [],
      "source": [
        "# df_desc_desig.to_csv(\"desc_designation_data_CLEAN.csv\", index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "f73502fd-62cf-47c0-a7d2-809eba94e561",
      "metadata": {
        "id": "f73502fd-62cf-47c0-a7d2-809eba94e561"
      },
      "outputs": [],
      "source": [
        "df_prov_price = top_ten_df[['province','wine_type']]\n",
        "df_prov = top_ten_df[['price','points']]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "cd0ef0b2-19ca-4267-8253-8b599fdb4d69",
      "metadata": {
        "id": "cd0ef0b2-19ca-4267-8253-8b599fdb4d69"
      },
      "outputs": [],
      "source": [
        "# Generate our categorical variable lists\n",
        "wine_cat = df_prov_price.dtypes[df_prov_price.dtypes == \"object\"].index.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "b544728b-d807-4e24-a485-09ea562e536f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "b544728b-d807-4e24-a485-09ea562e536f",
        "outputId": "fa998a82-8425-48de-e9b5-80a770dd8267"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   province_Bordeaux  province_Burgundy  province_California  \\\n",
              "0                0.0                0.0                  1.0   \n",
              "1                0.0                0.0                  1.0   \n",
              "2                0.0                0.0                  1.0   \n",
              "3                0.0                0.0                  1.0   \n",
              "4                0.0                0.0                  1.0   \n",
              "\n",
              "   province_Mendoza Province  province_Northern Spain  province_Oregon  \\\n",
              "0                        0.0                      0.0              0.0   \n",
              "1                        0.0                      0.0              0.0   \n",
              "2                        0.0                      0.0              0.0   \n",
              "3                        0.0                      0.0              0.0   \n",
              "4                        0.0                      0.0              0.0   \n",
              "\n",
              "   province_Piedmont  province_Tuscany  province_Veneto  province_Washington  \\\n",
              "0                0.0               0.0              0.0                  0.0   \n",
              "1                0.0               0.0              0.0                  0.0   \n",
              "2                0.0               0.0              0.0                  0.0   \n",
              "3                0.0               0.0              0.0                  0.0   \n",
              "4                0.0               0.0              0.0                  0.0   \n",
              "\n",
              "   wine_type_other  wine_type_red  wine_type_white  \n",
              "0              0.0            1.0              0.0  \n",
              "1              0.0            1.0              0.0  \n",
              "2              0.0            1.0              0.0  \n",
              "3              0.0            1.0              0.0  \n",
              "4              0.0            1.0              0.0  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-30576b3c-ce72-46fd-af59-4969444fd666\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>province_Bordeaux</th>\n",
              "      <th>province_Burgundy</th>\n",
              "      <th>province_California</th>\n",
              "      <th>province_Mendoza Province</th>\n",
              "      <th>province_Northern Spain</th>\n",
              "      <th>province_Oregon</th>\n",
              "      <th>province_Piedmont</th>\n",
              "      <th>province_Tuscany</th>\n",
              "      <th>province_Veneto</th>\n",
              "      <th>province_Washington</th>\n",
              "      <th>wine_type_other</th>\n",
              "      <th>wine_type_red</th>\n",
              "      <th>wine_type_white</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30576b3c-ce72-46fd-af59-4969444fd666')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-6ac4eb83-bd5c-4987-9dbe-ba4c2f23a3d5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6ac4eb83-bd5c-4987-9dbe-ba4c2f23a3d5')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-6ac4eb83-bd5c-4987-9dbe-ba4c2f23a3d5 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-30576b3c-ce72-46fd-af59-4969444fd666 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-30576b3c-ce72-46fd-af59-4969444fd666');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "# Create a OneHotEncoder instance\n",
        "enc = OneHotEncoder(sparse=False)\n",
        "\n",
        "# Fit and transform the OneHotEncoder using the categorical variable list\n",
        "encode_df = pd.DataFrame(enc.fit_transform(df_prov_price[wine_cat]))\n",
        "\n",
        "# Add the encoded variable names to the dataframe\n",
        "encode_df.columns = enc.get_feature_names_out(wine_cat)\n",
        "encode_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "5e9f3c66-aebf-41dd-92c3-37a1426c24f3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5e9f3c66-aebf-41dd-92c3-37a1426c24f3",
        "outputId": "3d7b8846-7e37-42d2-d3b7-2857fab0c6b1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     price  points\n",
              "3     75.0      85\n",
              "91    30.0      91\n",
              "112   28.0      89\n",
              "178   30.0      91\n",
              "234   25.0      87"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-8d2640e2-ef03-4fad-8f29-33a3db27e327\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>points</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>75.0</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>30.0</td>\n",
              "      <td>91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>28.0</td>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>30.0</td>\n",
              "      <td>91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>234</th>\n",
              "      <td>25.0</td>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d2640e2-ef03-4fad-8f29-33a3db27e327')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-9fe1f332-7a1b-4447-b7fe-30acd43e1f29\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9fe1f332-7a1b-4447-b7fe-30acd43e1f29')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-9fe1f332-7a1b-4447-b7fe-30acd43e1f29 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8d2640e2-ef03-4fad-8f29-33a3db27e327 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8d2640e2-ef03-4fad-8f29-33a3db27e327');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df_prov.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "5396d65c-1024-48ff-8682-b47938acfa1a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "5396d65c-1024-48ff-8682-b47938acfa1a",
        "outputId": "0c544086-91e5-42fd-9efd-f8d7f8acb297"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     price  points  province_Bordeaux  province_Burgundy  province_California  \\\n",
              "3     75.0      85                0.0                0.0                  1.0   \n",
              "91    30.0      91                0.0                0.0                  0.0   \n",
              "112   28.0      89                0.0                0.0                  1.0   \n",
              "178   30.0      91                0.0                1.0                  0.0   \n",
              "234   25.0      87                0.0                0.0                  0.0   \n",
              "\n",
              "     province_Mendoza Province  province_Northern Spain  province_Oregon  \\\n",
              "3                          0.0                      0.0              0.0   \n",
              "91                         0.0                      0.0              1.0   \n",
              "112                        0.0                      0.0              0.0   \n",
              "178                        0.0                      0.0              0.0   \n",
              "234                        0.0                      0.0              0.0   \n",
              "\n",
              "     province_Piedmont  province_Tuscany  province_Veneto  \\\n",
              "3                  0.0               0.0              0.0   \n",
              "91                 0.0               0.0              0.0   \n",
              "112                0.0               0.0              0.0   \n",
              "178                0.0               0.0              0.0   \n",
              "234                1.0               0.0              0.0   \n",
              "\n",
              "     province_Washington  wine_type_other  wine_type_red  wine_type_white  \n",
              "3                    0.0              0.0            1.0              0.0  \n",
              "91                   0.0              0.0            0.0              1.0  \n",
              "112                  0.0              0.0            0.0              1.0  \n",
              "178                  0.0              0.0            0.0              1.0  \n",
              "234                  0.0              0.0            0.0              1.0  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-a5ce571f-1a95-4b61-9122-349fc82f4390\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>points</th>\n",
              "      <th>province_Bordeaux</th>\n",
              "      <th>province_Burgundy</th>\n",
              "      <th>province_California</th>\n",
              "      <th>province_Mendoza Province</th>\n",
              "      <th>province_Northern Spain</th>\n",
              "      <th>province_Oregon</th>\n",
              "      <th>province_Piedmont</th>\n",
              "      <th>province_Tuscany</th>\n",
              "      <th>province_Veneto</th>\n",
              "      <th>province_Washington</th>\n",
              "      <th>wine_type_other</th>\n",
              "      <th>wine_type_red</th>\n",
              "      <th>wine_type_white</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>75.0</td>\n",
              "      <td>85</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>30.0</td>\n",
              "      <td>91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>28.0</td>\n",
              "      <td>89</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>30.0</td>\n",
              "      <td>91</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>234</th>\n",
              "      <td>25.0</td>\n",
              "      <td>87</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5ce571f-1a95-4b61-9122-349fc82f4390')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-e9b81675-d2bb-4168-a02c-5e05ee40b4b1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9b81675-d2bb-4168-a02c-5e05ee40b4b1')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-e9b81675-d2bb-4168-a02c-5e05ee40b4b1 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a5ce571f-1a95-4b61-9122-349fc82f4390 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a5ce571f-1a95-4b61-9122-349fc82f4390');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "# Merge one-hot encoded features and drop the originals\n",
        "df_merge = df_prov.merge(encode_df,left_index=True, right_index=True)\n",
        "# df_prov = df_prov.drop(wine_cat,1)\n",
        "df_merge.head()\n",
        "\n",
        "# df_concat = pd.concat([df_prov, encode_df], axis=1)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aAsZGWuJz9Qp",
        "outputId": "3220b1bb-dc9a-4bb7-ae73-e1d0e80ab3a4"
      },
      "id": "aAsZGWuJz9Qp",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "7cab1e66-e1cd-4baf-8f50-ea7172880acd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7cab1e66-e1cd-4baf-8f50-ea7172880acd",
        "outputId": "0c1cfd5c-a422-4ffd-f15f-0e9cce827286"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-25-8a081e35fda7>:3: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
            "  X = df_merge.drop([\"wine_type_red\",\"wine_type_white\",\"wine_type_other\"],1).values\n"
          ]
        }
      ],
      "source": [
        "# Split our preprocessed data into our features and target arrays\n",
        "y = df_merge[\"wine_type_red\"].values\n",
        "X = df_merge.drop([\"wine_type_red\",\"wine_type_white\",\"wine_type_other\"],1).values\n",
        "\n",
        "# Split the preprocessed data into a training and testing dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=78)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "id": "5fe5eb06-529a-407d-ac76-43f1d5587874",
      "metadata": {
        "id": "5fe5eb06-529a-407d-ac76-43f1d5587874"
      },
      "outputs": [],
      "source": [
        "# Create a StandardScaler instances\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Fit the StandardScaler\n",
        "X_scaler = scaler.fit(X_train)\n",
        "\n",
        "# Scale the data\n",
        "X_train_scaled = X_scaler.transform(X_train)\n",
        "X_test_scaled = X_scaler.transform(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "id": "d075d5f1-e12c-40b0-ad6a-9d8bab85c430",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d075d5f1-e12c-40b0-ad6a-9d8bab85c430",
        "outputId": "ed7c60f6-77df-49e3-f712-0b317d65adc4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_12\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_48 (Dense)            (None, 8)                 104       \n",
            "                                                                 \n",
            " dense_49 (Dense)            (None, 5)                 45        \n",
            "                                                                 \n",
            " dense_50 (Dense)            (None, 1)                 6         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 155\n",
            "Trainable params: 155\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# Define the model - deep neural net\n",
        "number_input_features = len(X_train[0])\n",
        "hidden_nodes_layer1 =  8\n",
        "hidden_nodes_layer2 = 5\n",
        "\n",
        "\n",
        "nn = tf.keras.models.Sequential()\n",
        "\n",
        "# First hidden layer\n",
        "nn.add(\n",
        "    tf.keras.layers.Dense(units=hidden_nodes_layer1, input_dim=number_input_features, activation=\"relu\")\n",
        ")\n",
        "\n",
        "# Second hidden layer\n",
        "nn.add(tf.keras.layers.Dense(units=hidden_nodes_layer2, activation=\"relu\"))\n",
        "\n",
        "# Output layer\n",
        "nn.add(tf.keras.layers.Dense(units=1, activation=\"sigmoid\"))\n",
        "\n",
        "# Check the structure of the model\n",
        "nn.summary()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the model\n",
        "nn.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"
      ],
      "metadata": {
        "id": "cy2mr3VU_Txg"
      },
      "id": "cy2mr3VU_Txg",
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "fit_model = nn.fit(X_train_scaled,y_train,epochs=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tUW58v8X_TnF",
        "outputId": "796ad755-84f2-41d5-fbcd-b19a02b994e2"
      },
      "id": "tUW58v8X_TnF",
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5642 - accuracy: 0.7413\n",
            "Epoch 2/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5437 - accuracy: 0.7447\n",
            "Epoch 3/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5422 - accuracy: 0.7448\n",
            "Epoch 4/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5413 - accuracy: 0.7451\n",
            "Epoch 5/100\n",
            "1114/1114 [==============================] - 5s 4ms/step - loss: 0.5407 - accuracy: 0.7453\n",
            "Epoch 6/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5403 - accuracy: 0.7453\n",
            "Epoch 7/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5398 - accuracy: 0.7453\n",
            "Epoch 8/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5394 - accuracy: 0.7462\n",
            "Epoch 9/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5392 - accuracy: 0.7456\n",
            "Epoch 10/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5387 - accuracy: 0.7462\n",
            "Epoch 11/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5387 - accuracy: 0.7458\n",
            "Epoch 12/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5384 - accuracy: 0.7461\n",
            "Epoch 13/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5383 - accuracy: 0.7457\n",
            "Epoch 14/100\n",
            "1114/1114 [==============================] - 4s 4ms/step - loss: 0.5381 - accuracy: 0.7457\n",
            "Epoch 15/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5380 - accuracy: 0.7460\n",
            "Epoch 16/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5381 - accuracy: 0.7455\n",
            "Epoch 17/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5377 - accuracy: 0.7462\n",
            "Epoch 18/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5378 - accuracy: 0.7464\n",
            "Epoch 19/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5376 - accuracy: 0.7459\n",
            "Epoch 20/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5376 - accuracy: 0.7459\n",
            "Epoch 21/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5376 - accuracy: 0.7457\n",
            "Epoch 22/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5373 - accuracy: 0.7458\n",
            "Epoch 23/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5375 - accuracy: 0.7457\n",
            "Epoch 24/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5374 - accuracy: 0.7460\n",
            "Epoch 25/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5373 - accuracy: 0.7467\n",
            "Epoch 26/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5373 - accuracy: 0.7460\n",
            "Epoch 27/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5371 - accuracy: 0.7464\n",
            "Epoch 28/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5371 - accuracy: 0.7463\n",
            "Epoch 29/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5372 - accuracy: 0.7463\n",
            "Epoch 30/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5372 - accuracy: 0.7462\n",
            "Epoch 31/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5370 - accuracy: 0.7465\n",
            "Epoch 32/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5370 - accuracy: 0.7468\n",
            "Epoch 33/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5368 - accuracy: 0.7462\n",
            "Epoch 34/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5369 - accuracy: 0.7466\n",
            "Epoch 35/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5368 - accuracy: 0.7459\n",
            "Epoch 36/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5367 - accuracy: 0.7461\n",
            "Epoch 37/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5365 - accuracy: 0.7462\n",
            "Epoch 38/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5365 - accuracy: 0.7466\n",
            "Epoch 39/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5366 - accuracy: 0.7467\n",
            "Epoch 40/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5365 - accuracy: 0.7464\n",
            "Epoch 41/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5364 - accuracy: 0.7467\n",
            "Epoch 42/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5363 - accuracy: 0.7466\n",
            "Epoch 43/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5364 - accuracy: 0.7464\n",
            "Epoch 44/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5364 - accuracy: 0.7469\n",
            "Epoch 45/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5363 - accuracy: 0.7469\n",
            "Epoch 46/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5363 - accuracy: 0.7469\n",
            "Epoch 47/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5364 - accuracy: 0.7465\n",
            "Epoch 48/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5361 - accuracy: 0.7468\n",
            "Epoch 49/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5362 - accuracy: 0.7471\n",
            "Epoch 50/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5361 - accuracy: 0.7466\n",
            "Epoch 51/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5361 - accuracy: 0.7470\n",
            "Epoch 52/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5360 - accuracy: 0.7470\n",
            "Epoch 53/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5360 - accuracy: 0.7467\n",
            "Epoch 54/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5361 - accuracy: 0.7464\n",
            "Epoch 55/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5361 - accuracy: 0.7468\n",
            "Epoch 56/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5359 - accuracy: 0.7468\n",
            "Epoch 57/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7471\n",
            "Epoch 58/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5359 - accuracy: 0.7473\n",
            "Epoch 59/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5359 - accuracy: 0.7471\n",
            "Epoch 60/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5359 - accuracy: 0.7468\n",
            "Epoch 61/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7469\n",
            "Epoch 62/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7468\n",
            "Epoch 63/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7466\n",
            "Epoch 64/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7471\n",
            "Epoch 65/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5360 - accuracy: 0.7465\n",
            "Epoch 66/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5358 - accuracy: 0.7469\n",
            "Epoch 67/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5359 - accuracy: 0.7466\n",
            "Epoch 68/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7470\n",
            "Epoch 69/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7469\n",
            "Epoch 70/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7470\n",
            "Epoch 71/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5356 - accuracy: 0.7464\n",
            "Epoch 72/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7472\n",
            "Epoch 73/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7475\n",
            "Epoch 74/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7469\n",
            "Epoch 75/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7470\n",
            "Epoch 76/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5357 - accuracy: 0.7468\n",
            "Epoch 77/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7473\n",
            "Epoch 78/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7466\n",
            "Epoch 79/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7471\n",
            "Epoch 80/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5357 - accuracy: 0.7468\n",
            "Epoch 81/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5356 - accuracy: 0.7471\n",
            "Epoch 82/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7469\n",
            "Epoch 83/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7474\n",
            "Epoch 84/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7464\n",
            "Epoch 85/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7466\n",
            "Epoch 86/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5357 - accuracy: 0.7468\n",
            "Epoch 87/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7469\n",
            "Epoch 88/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7472\n",
            "Epoch 89/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5353 - accuracy: 0.7472\n",
            "Epoch 90/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7471\n",
            "Epoch 91/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5356 - accuracy: 0.7474\n",
            "Epoch 92/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5355 - accuracy: 0.7468\n",
            "Epoch 93/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7475\n",
            "Epoch 94/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7473\n",
            "Epoch 95/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7468\n",
            "Epoch 96/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5356 - accuracy: 0.7464\n",
            "Epoch 97/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5354 - accuracy: 0.7468\n",
            "Epoch 98/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7470\n",
            "Epoch 99/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7466\n",
            "Epoch 100/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7469\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model using the test data\n",
        "model_loss, model_accuracy = nn.evaluate(X_test_scaled,y_test,verbose=2)\n",
        "print(f\"Loss: {model_loss}, Accuracy: {model_accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uFwcPhzG_aiT",
        "outputId": "79147076-b15e-4f86-f698-8b4eb570a9f3"
      },
      "id": "uFwcPhzG_aiT",
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "372/372 - 1s - loss: 0.5573 - accuracy: 0.7295 - 662ms/epoch - 2ms/step\n",
            "Loss: 0.5572815537452698, Accuracy: 0.7294543385505676\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Optimization attempt #1: add another layer, up the neurons\n",
        "# Define the model - deep neural net\n",
        "number_input_features = len(X_train[0])\n",
        "hidden_nodes_layer1 =  8\n",
        "hidden_nodes_layer2 = 8\n",
        "hidden_nodes_layer3 = 8\n",
        "\n",
        "\n",
        "nn = tf.keras.models.Sequential()\n",
        "\n",
        "# First hidden layer\n",
        "nn.add(\n",
        "    tf.keras.layers.Dense(units=hidden_nodes_layer1, input_dim=number_input_features, activation=\"relu\")\n",
        ")\n",
        "\n",
        "# Second hidden layer\n",
        "nn.add(tf.keras.layers.Dense(units=hidden_nodes_layer2, activation=\"linear\"))\n",
        "\n",
        "# third hidden layer\n",
        "nn.add(tf.keras.layers.Dense(units=hidden_nodes_layer2, activation=\"relu\"))\n",
        "\n",
        "# Output layer\n",
        "nn.add(tf.keras.layers.Dense(units=1, activation=\"sigmoid\"))\n",
        "\n",
        "# Check the structure of the model\n",
        "nn.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w2C3sm8V-cYN",
        "outputId": "7f4279ea-e30b-49f8-827c-5021424d86d7"
      },
      "id": "w2C3sm8V-cYN",
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_13\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_51 (Dense)            (None, 8)                 104       \n",
            "                                                                 \n",
            " dense_52 (Dense)            (None, 8)                 72        \n",
            "                                                                 \n",
            " dense_53 (Dense)            (None, 8)                 72        \n",
            "                                                                 \n",
            " dense_54 (Dense)            (None, 1)                 9         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 257\n",
            "Trainable params: 257\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "id": "30ce2fdc-f0f8-4345-aa5b-5593f0d6afee",
      "metadata": {
        "id": "30ce2fdc-f0f8-4345-aa5b-5593f0d6afee"
      },
      "outputs": [],
      "source": [
        "# Compile the model\n",
        "nn.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "id": "6c188870-d97a-480a-a6ec-4540ceec9b8d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6c188870-d97a-480a-a6ec-4540ceec9b8d",
        "outputId": "ae52824c-59c7-4e92-f124-d7e4efe08b99"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "1114/1114 [==============================] - 6s 3ms/step - loss: 0.5675 - accuracy: 0.7308\n",
            "Epoch 2/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5459 - accuracy: 0.7451\n",
            "Epoch 3/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5444 - accuracy: 0.7447\n",
            "Epoch 4/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5434 - accuracy: 0.7456\n",
            "Epoch 5/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5430 - accuracy: 0.7454\n",
            "Epoch 6/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5423 - accuracy: 0.7453\n",
            "Epoch 7/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5414 - accuracy: 0.7451\n",
            "Epoch 8/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5409 - accuracy: 0.7455\n",
            "Epoch 9/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5402 - accuracy: 0.7454\n",
            "Epoch 10/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5396 - accuracy: 0.7457\n",
            "Epoch 11/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5385 - accuracy: 0.7457\n",
            "Epoch 12/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5388 - accuracy: 0.7462\n",
            "Epoch 13/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5383 - accuracy: 0.7459\n",
            "Epoch 14/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5384 - accuracy: 0.7464\n",
            "Epoch 15/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5381 - accuracy: 0.7464\n",
            "Epoch 16/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5384 - accuracy: 0.7457\n",
            "Epoch 17/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5381 - accuracy: 0.7461\n",
            "Epoch 18/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5379 - accuracy: 0.7463\n",
            "Epoch 19/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5377 - accuracy: 0.7458\n",
            "Epoch 20/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5379 - accuracy: 0.7464\n",
            "Epoch 21/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5376 - accuracy: 0.7466\n",
            "Epoch 22/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5377 - accuracy: 0.7463\n",
            "Epoch 23/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5374 - accuracy: 0.7460\n",
            "Epoch 24/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5374 - accuracy: 0.7466\n",
            "Epoch 25/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5372 - accuracy: 0.7460\n",
            "Epoch 26/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5373 - accuracy: 0.7467\n",
            "Epoch 27/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5373 - accuracy: 0.7459\n",
            "Epoch 28/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5372 - accuracy: 0.7465\n",
            "Epoch 29/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5371 - accuracy: 0.7461\n",
            "Epoch 30/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5373 - accuracy: 0.7464\n",
            "Epoch 31/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5373 - accuracy: 0.7457\n",
            "Epoch 32/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5371 - accuracy: 0.7465\n",
            "Epoch 33/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5369 - accuracy: 0.7462\n",
            "Epoch 34/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5369 - accuracy: 0.7464\n",
            "Epoch 35/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5370 - accuracy: 0.7465\n",
            "Epoch 36/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5370 - accuracy: 0.7466\n",
            "Epoch 37/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5370 - accuracy: 0.7461\n",
            "Epoch 38/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5367 - accuracy: 0.7459\n",
            "Epoch 39/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5366 - accuracy: 0.7469\n",
            "Epoch 40/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5368 - accuracy: 0.7462\n",
            "Epoch 41/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5368 - accuracy: 0.7458\n",
            "Epoch 42/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5363 - accuracy: 0.7469\n",
            "Epoch 43/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5365 - accuracy: 0.7466\n",
            "Epoch 44/100\n",
            "1114/1114 [==============================] - 5s 4ms/step - loss: 0.5365 - accuracy: 0.7459\n",
            "Epoch 45/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5365 - accuracy: 0.7460\n",
            "Epoch 46/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5363 - accuracy: 0.7466\n",
            "Epoch 47/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5364 - accuracy: 0.7463\n",
            "Epoch 48/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5363 - accuracy: 0.7464\n",
            "Epoch 49/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5362 - accuracy: 0.7461\n",
            "Epoch 50/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5363 - accuracy: 0.7465\n",
            "Epoch 51/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5363 - accuracy: 0.7469\n",
            "Epoch 52/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5361 - accuracy: 0.7465\n",
            "Epoch 53/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5364 - accuracy: 0.7464\n",
            "Epoch 54/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7468\n",
            "Epoch 55/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5362 - accuracy: 0.7461\n",
            "Epoch 56/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5364 - accuracy: 0.7463\n",
            "Epoch 57/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5362 - accuracy: 0.7463\n",
            "Epoch 58/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5362 - accuracy: 0.7462\n",
            "Epoch 59/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7463\n",
            "Epoch 60/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5361 - accuracy: 0.7466\n",
            "Epoch 61/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5361 - accuracy: 0.7464\n",
            "Epoch 62/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7467\n",
            "Epoch 63/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5362 - accuracy: 0.7466\n",
            "Epoch 64/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5360 - accuracy: 0.7462\n",
            "Epoch 65/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5359 - accuracy: 0.7461\n",
            "Epoch 66/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7473\n",
            "Epoch 67/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5359 - accuracy: 0.7470\n",
            "Epoch 68/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5359 - accuracy: 0.7469\n",
            "Epoch 69/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5359 - accuracy: 0.7465\n",
            "Epoch 70/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5359 - accuracy: 0.7466\n",
            "Epoch 71/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5360 - accuracy: 0.7461\n",
            "Epoch 72/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5358 - accuracy: 0.7466\n",
            "Epoch 73/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5359 - accuracy: 0.7474\n",
            "Epoch 74/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5360 - accuracy: 0.7462\n",
            "Epoch 75/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7465\n",
            "Epoch 76/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5357 - accuracy: 0.7464\n",
            "Epoch 77/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5358 - accuracy: 0.7466\n",
            "Epoch 78/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7462\n",
            "Epoch 79/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5358 - accuracy: 0.7466\n",
            "Epoch 80/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7470\n",
            "Epoch 81/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5357 - accuracy: 0.7465\n",
            "Epoch 82/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5357 - accuracy: 0.7464\n",
            "Epoch 83/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5356 - accuracy: 0.7466\n",
            "Epoch 84/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7462\n",
            "Epoch 85/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5359 - accuracy: 0.7466\n",
            "Epoch 86/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5356 - accuracy: 0.7469\n",
            "Epoch 87/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5357 - accuracy: 0.7465\n",
            "Epoch 88/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7466\n",
            "Epoch 89/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7468\n",
            "Epoch 90/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5358 - accuracy: 0.7470\n",
            "Epoch 91/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5355 - accuracy: 0.7471\n",
            "Epoch 92/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5354 - accuracy: 0.7467\n",
            "Epoch 93/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5356 - accuracy: 0.7468\n",
            "Epoch 94/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5355 - accuracy: 0.7467\n",
            "Epoch 95/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7465\n",
            "Epoch 96/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5353 - accuracy: 0.7468\n",
            "Epoch 97/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7468\n",
            "Epoch 98/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5355 - accuracy: 0.7464\n",
            "Epoch 99/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5355 - accuracy: 0.7460\n",
            "Epoch 100/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7462\n"
          ]
        }
      ],
      "source": [
        "# Train the model\n",
        "fit_model = nn.fit(X_train_scaled,y_train,epochs=100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "id": "1301ecb8-1e88-4b46-89f9-c5633caf7fe8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1301ecb8-1e88-4b46-89f9-c5633caf7fe8",
        "outputId": "4daf85d7-781a-4b5d-fe84-82dbdb68ad72"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "372/372 - 1s - loss: 0.5566 - accuracy: 0.7301 - 829ms/epoch - 2ms/step\n",
            "Loss: 0.556568443775177, Accuracy: 0.7301279902458191\n"
          ]
        }
      ],
      "source": [
        "# Evaluate the model using the test data\n",
        "model_loss, model_accuracy = nn.evaluate(X_test_scaled,y_test,verbose=2)\n",
        "print(f\"Loss: {model_loss}, Accuracy: {model_accuracy}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "id": "f8507ee6-288c-40cd-8989-f4668875da36",
      "metadata": {
        "id": "f8507ee6-288c-40cd-8989-f4668875da36",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77c5f028-b653-4603-e11b-0104fdd1392f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_17\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_70 (Dense)            (None, 12)                156       \n",
            "                                                                 \n",
            " dense_71 (Dense)            (None, 12)                156       \n",
            "                                                                 \n",
            " dense_72 (Dense)            (None, 12)                156       \n",
            "                                                                 \n",
            " dense_73 (Dense)            (None, 12)                156       \n",
            "                                                                 \n",
            " dense_74 (Dense)            (None, 1)                 13        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 637\n",
            "Trainable params: 637\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# Optimization attempt #2: adding more neurons and include every type of activation method\n",
        "# Define the model - deep neural net\n",
        "number_input_features = len(X_train[0])\n",
        "hidden_nodes_layer1 =  12\n",
        "hidden_nodes_layer2 = 12\n",
        "# adding more layers and upping # of neurons\n",
        "hidden_nodes_layer3 = 12\n",
        "hidden_nodes_layer4 = 12\n",
        "\n",
        "nn = tf.keras.models.Sequential()\n",
        "\n",
        "# First hidden layer\n",
        "nn.add(\n",
        "    tf.keras.layers.Dense(units=hidden_nodes_layer1, input_dim=number_input_features, activation=\"relu\")\n",
        ")\n",
        "\n",
        "# Second hidden layer\n",
        "nn.add(tf.keras.layers.Dense(units=hidden_nodes_layer2, activation=\"tanh\"))\n",
        "\n",
        "# Third hidden layer\n",
        "nn.add(tf.keras.layers.Dense(units=hidden_nodes_layer3, activation=\"linear\"))\n",
        "\n",
        "# Fourth hidden layer\n",
        "nn.add(tf.keras.layers.Dense(units=hidden_nodes_layer4, activation=\"sigmoid\"))\n",
        "\n",
        "# Output layer\n",
        "nn.add(tf.keras.layers.Dense(units=1, activation=\"sigmoid\"))\n",
        "\n",
        "# Check the structure of the model\n",
        "nn.summary()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "id": "cd8f1548-032f-46bb-8567-ee14d64fac07",
      "metadata": {
        "id": "cd8f1548-032f-46bb-8567-ee14d64fac07"
      },
      "outputs": [],
      "source": [
        "# Compile the model\n",
        "nn.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "fit_model = nn.fit(X_train_scaled,y_train,epochs=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eRKxqkNv5U6H",
        "outputId": "5a61a433-934e-4c1e-e228-14a4fbc29f8b"
      },
      "id": "eRKxqkNv5U6H",
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "1114/1114 [==============================] - 5s 3ms/step - loss: 0.5723 - accuracy: 0.7194\n",
            "Epoch 2/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5465 - accuracy: 0.7455\n",
            "Epoch 3/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5432 - accuracy: 0.7457\n",
            "Epoch 4/100\n",
            "1114/1114 [==============================] - 4s 4ms/step - loss: 0.5421 - accuracy: 0.7461\n",
            "Epoch 5/100\n",
            "1114/1114 [==============================] - 5s 4ms/step - loss: 0.5410 - accuracy: 0.7461\n",
            "Epoch 6/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5408 - accuracy: 0.7458\n",
            "Epoch 7/100\n",
            "1114/1114 [==============================] - 5s 5ms/step - loss: 0.5402 - accuracy: 0.7461\n",
            "Epoch 8/100\n",
            "1114/1114 [==============================] - 5s 4ms/step - loss: 0.5394 - accuracy: 0.7459\n",
            "Epoch 9/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5392 - accuracy: 0.7458\n",
            "Epoch 10/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5386 - accuracy: 0.7461\n",
            "Epoch 11/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5385 - accuracy: 0.7467\n",
            "Epoch 12/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5384 - accuracy: 0.7462\n",
            "Epoch 13/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5380 - accuracy: 0.7464\n",
            "Epoch 14/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5375 - accuracy: 0.7461\n",
            "Epoch 15/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5376 - accuracy: 0.7467\n",
            "Epoch 16/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5375 - accuracy: 0.7457\n",
            "Epoch 17/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5373 - accuracy: 0.7465\n",
            "Epoch 18/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5373 - accuracy: 0.7466\n",
            "Epoch 19/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5371 - accuracy: 0.7464\n",
            "Epoch 20/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5371 - accuracy: 0.7460\n",
            "Epoch 21/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5369 - accuracy: 0.7467\n",
            "Epoch 22/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5368 - accuracy: 0.7466\n",
            "Epoch 23/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5365 - accuracy: 0.7469\n",
            "Epoch 24/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5367 - accuracy: 0.7471\n",
            "Epoch 25/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5369 - accuracy: 0.7469\n",
            "Epoch 26/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5365 - accuracy: 0.7467\n",
            "Epoch 27/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5366 - accuracy: 0.7459\n",
            "Epoch 28/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5363 - accuracy: 0.7468\n",
            "Epoch 29/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5365 - accuracy: 0.7464\n",
            "Epoch 30/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5362 - accuracy: 0.7463\n",
            "Epoch 31/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5363 - accuracy: 0.7468\n",
            "Epoch 32/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5361 - accuracy: 0.7464\n",
            "Epoch 33/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5361 - accuracy: 0.7464\n",
            "Epoch 34/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7465\n",
            "Epoch 35/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5360 - accuracy: 0.7463\n",
            "Epoch 36/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5360 - accuracy: 0.7464\n",
            "Epoch 37/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7463\n",
            "Epoch 38/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5360 - accuracy: 0.7467\n",
            "Epoch 39/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5357 - accuracy: 0.7455\n",
            "Epoch 40/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5357 - accuracy: 0.7465\n",
            "Epoch 41/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5359 - accuracy: 0.7470\n",
            "Epoch 42/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5358 - accuracy: 0.7464\n",
            "Epoch 43/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7465\n",
            "Epoch 44/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5356 - accuracy: 0.7461\n",
            "Epoch 45/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5357 - accuracy: 0.7463\n",
            "Epoch 46/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5355 - accuracy: 0.7468\n",
            "Epoch 47/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5352 - accuracy: 0.7466\n",
            "Epoch 48/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5351 - accuracy: 0.7461\n",
            "Epoch 49/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5354 - accuracy: 0.7465\n",
            "Epoch 50/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5353 - accuracy: 0.7464\n",
            "Epoch 51/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5352 - accuracy: 0.7469\n",
            "Epoch 52/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5352 - accuracy: 0.7466\n",
            "Epoch 53/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5351 - accuracy: 0.7463\n",
            "Epoch 54/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5351 - accuracy: 0.7464\n",
            "Epoch 55/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5352 - accuracy: 0.7467\n",
            "Epoch 56/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5351 - accuracy: 0.7465\n",
            "Epoch 57/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5350 - accuracy: 0.7466\n",
            "Epoch 58/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5349 - accuracy: 0.7463\n",
            "Epoch 59/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5350 - accuracy: 0.7469\n",
            "Epoch 60/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5349 - accuracy: 0.7468\n",
            "Epoch 61/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5345 - accuracy: 0.7468\n",
            "Epoch 62/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5348 - accuracy: 0.7466\n",
            "Epoch 63/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5348 - accuracy: 0.7466\n",
            "Epoch 64/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5348 - accuracy: 0.7461\n",
            "Epoch 65/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5347 - accuracy: 0.7468\n",
            "Epoch 66/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5349 - accuracy: 0.7473\n",
            "Epoch 67/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5347 - accuracy: 0.7464\n",
            "Epoch 68/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5347 - accuracy: 0.7465\n",
            "Epoch 69/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5346 - accuracy: 0.7467\n",
            "Epoch 70/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5346 - accuracy: 0.7459\n",
            "Epoch 71/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5346 - accuracy: 0.7465\n",
            "Epoch 72/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5347 - accuracy: 0.7474\n",
            "Epoch 73/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5343 - accuracy: 0.7466\n",
            "Epoch 74/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5345 - accuracy: 0.7464\n",
            "Epoch 75/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5342 - accuracy: 0.7470\n",
            "Epoch 76/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5345 - accuracy: 0.7468\n",
            "Epoch 77/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5345 - accuracy: 0.7469\n",
            "Epoch 78/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5343 - accuracy: 0.7471\n",
            "Epoch 79/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5343 - accuracy: 0.7469\n",
            "Epoch 80/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5344 - accuracy: 0.7467\n",
            "Epoch 81/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5343 - accuracy: 0.7473\n",
            "Epoch 82/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5344 - accuracy: 0.7469\n",
            "Epoch 83/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5343 - accuracy: 0.7472\n",
            "Epoch 84/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5343 - accuracy: 0.7468\n",
            "Epoch 85/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5343 - accuracy: 0.7468\n",
            "Epoch 86/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5341 - accuracy: 0.7472\n",
            "Epoch 87/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5343 - accuracy: 0.7471\n",
            "Epoch 88/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5341 - accuracy: 0.7477\n",
            "Epoch 89/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5341 - accuracy: 0.7468\n",
            "Epoch 90/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5340 - accuracy: 0.7468\n",
            "Epoch 91/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5340 - accuracy: 0.7469\n",
            "Epoch 92/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5339 - accuracy: 0.7467\n",
            "Epoch 93/100\n",
            "1114/1114 [==============================] - 3s 3ms/step - loss: 0.5341 - accuracy: 0.7468\n",
            "Epoch 94/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5341 - accuracy: 0.7469\n",
            "Epoch 95/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5339 - accuracy: 0.7474\n",
            "Epoch 96/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5339 - accuracy: 0.7468\n",
            "Epoch 97/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5339 - accuracy: 0.7474\n",
            "Epoch 98/100\n",
            "1114/1114 [==============================] - 4s 3ms/step - loss: 0.5337 - accuracy: 0.7471\n",
            "Epoch 99/100\n",
            "1114/1114 [==============================] - 3s 2ms/step - loss: 0.5337 - accuracy: 0.7480\n",
            "Epoch 100/100\n",
            "1114/1114 [==============================] - 2s 2ms/step - loss: 0.5339 - accuracy: 0.7472\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_loss, model_accuracy = nn.evaluate(X_test_scaled,y_test,verbose=2)\n",
        "print(f\"Loss: {model_loss}, Accuracy: {model_accuracy}\")"
      ],
      "metadata": {
        "id": "ff_TZlD65ewK"
      },
      "id": "ff_TZlD65ewK",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Optimization attempts reveal no increased accuracy with additional layers/neurons/activation methods.\n",
        "# This indicates that predicting wine types with only the province of origin is not an accurate estimator"
      ],
      "metadata": {
        "id": "18NM3hkb5uRV"
      },
      "id": "18NM3hkb5uRV",
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zY9gSwi2_pQo"
      },
      "id": "zY9gSwi2_pQo",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
